<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://blog.jamesbrooks.net/</id><title>James Brooks</title><subtitle>Programming devblog covering whatever I'm currently working on, from Ruby on Rails through to Unreal Engine 4</subtitle> <updated>2023-08-25T12:00:28+09:30</updated> <author> <name>James Brooks</name> <uri>https://blog.jamesbrooks.net/</uri> </author><link rel="self" type="application/atom+xml" href="https://blog.jamesbrooks.net/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://blog.jamesbrooks.net/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 James Brooks </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Enhanced broadcasting with Action Cable</title><link href="https://blog.jamesbrooks.net/posts/enhanced-broadcasting-with-actioncable/" rel="alternate" type="text/html" title="Enhanced broadcasting with Action Cable" /><published>2023-08-25T00:00:00+09:30</published> <updated>2023-08-25T00:00:00+09:30</updated> <id>https://blog.jamesbrooks.net/posts/enhanced-broadcasting-with-actioncable/</id> <content src="https://blog.jamesbrooks.net/posts/enhanced-broadcasting-with-actioncable/" /> <author> <name>James Brooks</name> </author> <category term="Ruby on Rails" /> <summary> When using Action Cable sometimes it is useful to broadcast to a channel only if there are active subscriptions. This can be useful to avoid unnecessary processing and network traffic, as well as reduce the load on the server in cases where generating the broadcast payload is expensive (e.g. a large chunk of HTML). Recently I ran into a situation in a project where the result of an action shou... </summary> </entry> <entry><title>Websockets and dedicated servers</title><link href="https://blog.jamesbrooks.net/posts/websockets-and-dedicated-servers/" rel="alternate" type="text/html" title="Websockets and dedicated servers" /><published>2021-10-18T00:00:00+10:30</published> <updated>2021-10-18T00:00:00+10:30</updated> <id>https://blog.jamesbrooks.net/posts/websockets-and-dedicated-servers/</id> <content src="https://blog.jamesbrooks.net/posts/websockets-and-dedicated-servers/" /> <author> <name>James Brooks</name> </author> <category term="Unreal Engine 4" /> <summary> Quick post! I was having trouble using Websockets in Unreal Engine 4 when building the project as a linux dedicated server. FWebSocketsModule::Get().CreateWebSocket was erroring with a fatal error (invalid attempt to read memory) as FWebSocketsModule was nullptr on those builds. This was working happily in-editor. The problem was that the module was not loaded for linux dedicated server build... </summary> </entry> <entry><title>Count loader for graphql-batch</title><link href="https://blog.jamesbrooks.net/posts/graphql-batch-count-loader/" rel="alternate" type="text/html" title="Count loader for graphql-batch" /><published>2021-04-11T00:00:00+09:30</published> <updated>2021-04-11T00:00:00+09:30</updated> <id>https://blog.jamesbrooks.net/posts/graphql-batch-count-loader/</id> <content src="https://blog.jamesbrooks.net/posts/graphql-batch-count-loader/" /> <author> <name>James Brooks</name> </author> <category term="Ruby on Rails" /> <summary> When implemented a GraphQL API using GraphQL Ruby it is beneficial to ensure that executed queries don’t trigger any N+1 query problems. One (of many) solutions to this is graphql-batch which provides a means of delcaring loaders to perform batched execution, avoding N+1 query problems. A record and assocation loader is provided by default and these perform their jobs admirably, though alone ... </summary> </entry> <entry><title>Default transformations for ActiveStorage attachments</title><link href="https://blog.jamesbrooks.net/posts/default-transformations-for-active-storage-attachments/" rel="alternate" type="text/html" title="Default transformations for ActiveStorage attachments" /><published>2020-06-11T00:00:00+09:30</published> <updated>2021-09-16T06:38:37+09:30</updated> <id>https://blog.jamesbrooks.net/posts/default-transformations-for-active-storage-attachments/</id> <content src="https://blog.jamesbrooks.net/posts/default-transformations-for-active-storage-attachments/" /> <author> <name>James Brooks</name> </author> <category term="Ruby on Rails" /> <summary> Recently I needed to crop images across a variety of models and attachments on a recent Rails project using ActiveStorage. The initial native solution was to implement methods in each of these models, check to see if there are any stored crop settings, and perform cropping and any extra passed in image transformations to variant. This quickly bloated out off control. To combat this the follow... </summary> </entry> <entry><title>Fixing 'movement not allowed' for respawned pawns</title><link href="https://blog.jamesbrooks.net/posts/fixing-movement-not-allowed-for-respawned-pawns/" rel="alternate" type="text/html" title="Fixing 'movement not allowed' for respawned pawns" /><published>2020-01-13T00:00:00+10:30</published> <updated>2020-01-13T00:00:00+10:30</updated> <id>https://blog.jamesbrooks.net/posts/fixing-movement-not-allowed-for-respawned-pawns/</id> <content src="https://blog.jamesbrooks.net/posts/fixing-movement-not-allowed-for-respawned-pawns/" /> <author> <name>James Brooks</name> </author> <category term="Unreal Engine 4" /> <summary> Have you ran into the issue “SimpleMove failed for X: movement not allowed” when trying to call Simple Move to Location after respawning a multiplayer pawn? After a player’s pawn has been killed and respawned (a new pawn spawned and possessed by the PlayerController) we were unable to call UAIBlueprintHelperLibrary::SimpleMoveToLocation with out error “movement not allowed” presenting itself. ... </summary> </entry> </feed>
